{"version":3,"sources":["utils/actionButtons.js","components/ActionCarousel/index.js","components/AlphaSlider/index.js","components/ColorPicker/index.js","components/SizeSlider/index.js","utils/convertFunctions.js","api/index.js","App.js","serviceWorker.js","index.js"],"names":["actionButtons","id","type","sliderType","number","name","iconName","orderActionButtons","keyword","orderingFunc","a","b","sprayActions","filter","btn","sort","bgActions","sizeAction","find","currentActionButtonIndex","Object","toConsumableArray","concat","ActionCarousel","props","react_default","createElement","className","onClick","onPrev","react_fontawesome_index_es","icon","children","currentIndex","onNext","AlphaSlider","style","height","background","color","position","left","knobPosition","width","onTouchMove","event","touchX","touches","clientX","fullWidth","document","querySelector","clientWidth","onChange","ColorPicker","SizeSlider","tiltToPercent","tilt","percentToSpraySize","percent","Math","floor","colorPercentToRGB","r","g","rgbAndDarknessToRGBA","_ref","darkness","red","green","blue","createConvert","createSocketAPI","convert","socket","io","connect","emitSprayColor","rgb","emit","emitBgColor","emitSpraySize","size","emitUndo","emitRedo","emitClear","library","add","faSprayCan","faChevronLeft","faChevronRight","faFill","faPalette","faChalkboard","faEye","faFillDrip","faArrowsAltH","faUndoAlt","faRedoAlt","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onUndoClicked","socketAPI","onRedoClicked","onClearClicked","onChangeSprayColor","newValue","intValue","setState","sprayColor","state","sprayDarkness","onChangeSprayDarkness","onChangeBgColor","bgColor","bgDarkness","onChangeBgDarkness","onChangeSpraySize","spraySize","onSelectDashItem","targetElement","target","tagName","onPrevButtonClick","prevState","onNextButtonClick","length","onDeviceOrientationChange","beta","renderSlider","components_ColorPicker","components_AlphaSlider","components_SizeSlider","tipBarLabelText","currentDeviceOrientationChangeListener","undefined","_this2","sprayColorRGB","bgColorRGB","_this$state$actionBut","idToDataMap","spray-color","spray-darkness","spray-size","bg-color","bg-darkness","backgroundColor","components_ActionCarousel","map","_ref2","key","onTouchStart","window","addEventListener","onTouchEnd","removeEventListener","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac469b3e.chunk.js","sourcesContent":["const actionButtons = [\n  {\n    id: 'spray-color',\n    type: 'spray',\n    sliderType: 'color',\n    number: 1,\n    name: 'Spray Color',\n    iconName: 'palette',\n  },\n  {\n    id: 'spray-darkness',\n    type: 'spray',\n    sliderType: 'darkness',\n    number: 2,\n    name: 'Spray Darkness',\n    iconName: 'eye',\n  },\n  {\n    id: 'spray-size',\n    type: 'size',\n    sliderType: 'size',\n    number: 1,\n    name: 'Spray Size',\n    iconName: 'arrows-alt-h',\n  },\n  {\n    id: 'bg-color',\n    type: 'bg',\n    sliderType: 'color',\n    number: 1,\n    name: 'Wall Color',\n    iconName: 'fill-drip',\n  },\n  {\n    id: 'bg-darkness',\n    type: 'bg',\n    sliderType: 'darkness',\n    number: 2,\n    name: 'Wall Darkness',\n    iconName: 'chalkboard',\n  },\n\n]\n\nconst orderActionButtons = (keyword, actionButtons) => {\n  const orderingFunc = (a, b) => {\n    if (a.number < b.number) {\n      return -1;\n    }\n    else if (a.number > b.number) {\n      return 1;\n    }\n    else {\n      return 0;\n    }\n  }\n  const sprayActions = actionButtons.filter(btn => btn.type === 'spray').sort(orderingFunc);\n  const bgActions = actionButtons.filter(btn => btn.type === 'bg').sort(orderingFunc);\n  const sizeAction = actionButtons.find(btn => btn.type === 'size');\n\n  switch (keyword) {\n    case 'spray':\n      return ({\n        currentActionButtonIndex: 0,\n        actionButtons: [...sprayActions, sizeAction, ...bgActions]\n      });\n    case 'bg':\n      return ({\n        currentActionButtonIndex: 0,\n        actionButtons: [...bgActions, ...sprayActions, sizeAction]\n      });\n    case 'size':\n      return ({\n        currentActionButtonIndex: 0,\n        actionButtons: [sizeAction, ...sprayActions, ...bgActions]\n      });\n    default:\n      return false;\n  }\n}\n\nexport { actionButtons, orderActionButtons };","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst ActionCarousel = (props) => {\n  return (\n    <div className=\"ActionCarousel\">\n\n      <div className=\"PrevButton\"\n        onClick={props.onPrev}\n      >\n        <FontAwesomeIcon icon=\"chevron-left\" />\n      </div>\n\n      {props.children[props.currentIndex]}\n\n      <div className=\"NextButton\"\n        onClick={props.onNext}\n      >\n        <FontAwesomeIcon icon=\"chevron-right\" />\n      </div>\n\n    </div>\n  );\n};\n\nexport default ActionCarousel;","import React from 'react';\n\nconst AlphaSlider = (props) => {\n\n  const getSliderWidth = () => document.querySelector('.ToolSlide').clientWidth;\n\n  return (\n    <div\n      className=\"ToolSlide\"\n      style={{\n        height: \"30px\",\n        background: `linear-gradient(to right, rgba(255, 255, 255, 0.0) 0%, ${props.color} 50%, rgba(0, 0, 0, 1.0) 100%)`,\n      }}\n    >\n      <div className=\"Slider\"\n        style={{\n          position: \"absolute\",\n          left: `${(props.knobPosition / 100) * 91}%`\n        }}\n      >\n        <div className=\"SliderKnob\"\n          style={{\n            width: \"30px\",\n            height: \"30px\",\n          }}\n          onTouchMove={(event) => {\n            const touchX = event.touches[0].clientX;\n            const fullWidth = getSliderWidth();\n            if (touchX < 0 || touchX > fullWidth) {\n              return;\n            }\n\n            props.onChange((touchX / fullWidth) * 100);\n          }}\n        >\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AlphaSlider;","import React from 'react';\n\nconst ColorPicker = (props) => {\n\n  const getSliderWidth = () => document.querySelector('.ToolSlide').clientWidth;\n\n  return (\n    <div\n      className=\"ToolSlide\"\n      style={{\n        height: \"30px\",\n        background: \"linear-gradient(to right, rgb(255, 0, 0) 0%, rgb(255, 255, 0) 17%, rgb(0, 255, 0) 33%, rgb(0, 255, 255) 50%, rgb(0, 0, 255) 67%, rgb(255, 0, 255) 83%, rgb(255, 0, 0) 100%)\",\n      }}\n    >\n      <div className=\"Slider\"\n        style={{\n          position: \"absolute\",\n          left: `${(props.knobPosition / 100) * 91}%`\n        }}\n      >\n        <div className=\"SliderKnob\"\n          style={{\n            width: \"30px\",\n            height: \"30px\",\n\n          }}\n          onTouchMove={(event) => {\n            const touchX = event.touches[0].clientX;\n            const fullWidth = getSliderWidth();\n            if (touchX < 0 || touchX > fullWidth) {\n              return;\n            }\n\n            props.onChange((touchX / fullWidth) * 100);\n          }}\n        >\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ColorPicker;","import React from 'react';\n\nconst SizeSlider = (props) => {\n\n  const getSliderWidth = () => document.querySelector('.ToolSlide').clientWidth;\n\n  return (\n    <div\n      className=\"ToolSlide SizeSlide\"\n      style={{\n        height: \"30px\",\n        background: \"white\",\n      }}\n    >\n      <p>1</p>\n      <p>25</p>\n      <p>50</p>\n      <div className=\"Slider\"\n        style={{\n          position: \"absolute\",\n          left: `${(props.knobPosition / 100) * 91}%`\n        }}\n      >\n        <div className=\"SliderKnob\"\n          style={{\n            width: \"30px\",\n            height: \"30px\",\n          }}\n          onTouchMove={(event) => {\n            const touchX = event.touches[0].clientX;\n            const fullWidth = getSliderWidth();\n            if (touchX < 0 || touchX > fullWidth) {\n              return;\n            }\n\n            props.onChange((touchX / fullWidth) * 100);\n          }}\n        >\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SizeSlider;","const tiltToPercent = (tilt) => {\n  if (tilt < 25) {\n    return 0;\n  }\n  else if (tilt > 75) {\n    return 100;\n  }\n  else {\n    return (tilt - 25) * 2;\n  }\n}\n\nconst percentToSpraySize = (percent) => {\n  return Math.floor(1 + percent / 100 * 49);\n}\n\nconst colorPercentToRGB = (percent) => {\n  if (percent < 0 || percent > 100) {\n    return { r: 255, g: 0, b: 0 };\n  }\n\n  let colorPercent = percent;\n  if (0 <= percent && percent <= 17) {\n    return { r: 255, g: (colorPercent / 17) * 255, b: 0 };\n  }\n  else if (17 < percent && percent <= 33) {\n    // y = x * a + b\n    // 255 = 17 * a + b\n    // 0 = 33 * a + b\n    // b = -33 * a, 255 = 17a - 33a = -16a, \n    // a = -255/16\n    // b = (-33 * -255)/16 = 525.9375\n    return { r: (percent * (-255 / 16)) + 525.9375, g: 255, b: 0 };\n  }\n  else if (33 < percent && percent <= 50) {\n    // y = x * a + b\n    // 0 = 33 * a + b\n    // 255 = 50 * a + b\n    // b = -33 * a, 255 = 50a - 33a = 17a, \n    // a = 255/17\n    // b = (-33 * 255)/17 = -495\n    return { r: 0, g: 255, b: (percent * (255 / 17)) - 495 };\n  }\n  else if (50 < percent && percent <= 67) {\n    // y = x * a + b\n    // 0 = 67 * a + b\n    // 255 = 50 * a + b\n    // b = -67 * a, 255 = 50a - 67a = -17a, \n    // a = -255/17\n    // b = (-67 * -255)/17 = + 1005\n    return { r: 0, g: (percent * (-255 / 17)) + 1005, b: 255 };\n  }\n  else if (67 < percent && percent <= 83) {\n    // y = x * a + b\n    // 0 = 67 * a + b\n    // 255 = 83 * a + b\n    // b = -67 * a, 255 = 83a - 67a = 16a, \n    // a = 255/16\n    // b = (-67 * 255)/16 = -1067.8125\n    return { r: (percent * (255 / 16)) - 1067.8125, g: 0, b: 255 };\n  }\n  else if (83 < percent && percent <= 100) {\n    // y = x * a + b\n    // 0 = 100 * a + b\n    // 255 = 83 * a + b\n    // b = -100 * a, 255 = 83a - 100a = -17a, \n    // a = -255/17\n    // b = (-100 * -255)/17 = 1500\n    return { r: 255, g: 0, b: (percent * (-255 / 17)) + 1500 };\n  }\n}\n\nconst rgbAndDarknessToRGBA = ({ r, g, b }, darkness) => {\n  if (darkness < 0) {\n    return `rgba(255, 255, 255, 1.0)`;\n  }\n  else if (darkness > 100) {\n    return `rgba(0, 0, 0, 1.0)`;\n  }\n  else if (darkness >= 50) {\n    // y = x * a + b\n    // r/g/b = 50 * a + b\n    // 0 = 100 * a + b\n    // b = -100 * a, r/g/b = 50a - 100a = -50a, \n    // a = - (r/g/b) /50\n    // b = 100 * (r/g/b) /50 = 50 * (r/g/b)\n    // newR = alpha * - (r/50) + (-100 * -r/50)\n    const red = darkness * (-r / 50) + (2 * r);\n    const green = darkness * (-g / 50) + (2 * g);\n    const blue = darkness * (-b / 50) + (2 * b);\n    return `rgba(${Math.floor(red)}, ${Math.floor(green)}, ${Math.floor(blue)}, 1.0)`;\n  }\n  else /* 0..50 */ {\n    // y = x * a + b\n    // 255 = 0 * a +b\n    // r/g/b = 50 * a + b\n    // b = 255\n    // r/g/b = 50 * a + 255\n    // a = (r + 255)/50\n    // y = x * (r - 255)/50 + 255\n    const red = darkness * ((r - 255) / 50) + 255;\n    const green = darkness * ((g - 255) / 50) + 255;\n    const blue = darkness * ((b - 255) / 50) + 255;\n    return `rgba(${Math.floor(red)}, ${Math.floor(green)}, ${Math.floor(blue)}, 1.0)`;\n  }\n}\n\nconst createConvert = () => ({\n  tiltToPercent,\n  percentToSpraySize,\n  colorPercentToRGB,\n  rgbAndDarknessToRGBA\n});\n\nexport default createConvert;","import io from 'socket.io-client';\n\nconst createSocketAPI = (convert) => {\n  const socket = io.connect('/palette');\n\n  const emitSprayColor = (rgb, darkness) => {\n    const color = convert.rgbAndDarknessToRGBA(\n      convert.colorPercentToRGB(rgb),\n      darkness\n    );\n    socket.emit('spray-color', { color });\n    return `emitSpray(${color})`;\n  }\n\n  const emitBgColor = (rgb, darkness) => {\n    const color = convert.rgbAndDarknessToRGBA(\n      convert.colorPercentToRGB(rgb),\n      darkness\n    );\n    socket.emit('bg-color', { color });\n    return `emitBG(${color})`;\n  }\n\n  const emitSpraySize = (percent) => {\n    const size = convert.percentToSpraySize(percent);\n    socket.emit('spray-size', { size });\n    return `emitSize(${size})`;\n  }\n\n  const emitUndo = () => {\n    socket.emit('undo', {});\n  }\n\n  const emitRedo = () => {\n    socket.emit('redo', {});\n  }\n\n  const emitClear = () => {\n    socket.emit('clear', {});\n  }\n\n  return ({\n    emitSprayColor,\n    emitBgColor,\n    emitSpraySize,\n    emitUndo,\n    emitRedo,\n    emitClear\n  });\n}\n\nexport default createSocketAPI;","import React, { Component } from 'react';\nimport { actionButtons, orderActionButtons } from './utils/actionButtons';\nimport {\n  faArrowsAltH,\n  faChalkboard,\n  faChevronLeft,\n  faChevronRight,\n  faEye,\n  faFill,\n  faFillDrip,\n  faPalette,\n  faRedoAlt,\n  faSprayCan,\n  faUndoAlt\n} from '@fortawesome/free-solid-svg-icons';\n\nimport ActionCarousel from './components/ActionCarousel';\nimport AlphaSlider from './components/AlphaSlider';\nimport ColorPicker from './components/ColorPicker';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SizeSlider from './components/SizeSlider';\nimport createConvert from './utils/convertFunctions';\nimport createSocketAPI from './api/';\nimport { library } from '@fortawesome/fontawesome-svg-core';\n\nlibrary.add(\n  faSprayCan, faChevronLeft, faChevronRight,\n  faFill, faPalette, faChalkboard,\n  faEye, faFillDrip, faArrowsAltH,\n  faUndoAlt, faRedoAlt\n);\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tipBarLabelText: 'Shake to Reload',\n      sprayColor: 0,\n      sprayDarkness: 50,\n      spraySize: 50,\n      bgColor: 0,\n      bgDarkness: 0,\n      currentActionButtonIndex: 0,\n      actionButtons,\n    }\n\n    this.convert = createConvert();\n    this.socketAPI = createSocketAPI(this.convert);\n\n    this.currentDeviceOrientationChangeListener = undefined;\n  }\n\n  onUndoClicked = () => {\n    this.socketAPI.emitUndo();\n  }\n\n  onRedoClicked = () => {\n    this.socketAPI.emitRedo();\n  }\n\n  onClearClicked = () => {\n    this.socketAPI.emitClear();\n  }\n\n  onChangeSprayColor = (newValue) => {\n    let intValue = Math.floor(newValue);\n    if (newValue < 0) {\n      intValue = 0;\n    }\n    else if (newValue > 100) {\n      intValue = 100;\n    }\n\n    this.setState(() => ({\n      sprayColor: intValue,\n    }));\n\n    this.socketAPI.emitSprayColor(intValue, this.state.sprayDarkness);\n\n    // this.setState({\n    //   tipBarLabelText: this.socketAPI.emitSprayColor(intValue, this.state.sprayDarkness),\n    // })\n  }\n\n  onChangeSprayDarkness = (newValue) => {\n    let intValue = Math.floor(newValue);\n    if (newValue < 0) {\n      intValue = 0;\n    }\n    else if (newValue > 100) {\n      intValue = 100;\n    }\n\n    this.setState(() => ({\n      sprayDarkness: intValue,\n    }));\n\n    this.socketAPI.emitSprayColor(this.state.sprayColor, intValue);\n    // this.setState({\n    //   tipBarLabelText: this.socketAPI.emitSprayColor(this.state.sprayColor, intValue),\n    // })\n  }\n\n  onChangeBgColor = (newValue) => {\n    let intValue = Math.floor(newValue);\n    if (newValue < 0) {\n      intValue = 0;\n    }\n    else if (newValue > 100) {\n      intValue = 100;\n    }\n\n    this.setState(() => ({\n      bgColor: intValue,\n    }));\n\n    this.socketAPI.emitBgColor(intValue, this.state.bgDarkness);\n    // this.setState({\n    //   tipBarLabelText: this.socketAPI.emitBgColor(intValue, this.state.bgDarkness),\n    // })\n  }\n\n  onChangeBgDarkness = (newValue) => {\n    let intValue = Math.floor(newValue);\n    if (newValue < 0) {\n      intValue = 0;\n    }\n    else if (newValue > 100) {\n      intValue = 100;\n    }\n\n    this.setState(() => ({\n      bgDarkness: intValue,\n    }));\n\n    this.socketAPI.emitBgColor(this.state.bgColor, intValue);\n    // this.setState({\n    //   tipBarLabelText: this.socketAPI.emitBgColor(this.state.bgColor, intValue),\n    // })\n  }\n\n  onChangeSpraySize = (newValue) => {\n    let intValue = Math.floor(newValue);\n    if (newValue < 0) {\n      intValue = 0;\n    }\n    else if (newValue > 100) {\n      intValue = 100;\n    }\n\n    this.setState(() => ({\n      spraySize: intValue,\n    }));\n\n    this.socketAPI.emitSpraySize(intValue);\n    // this.setState({\n    //   tipBarLabelText: this.socketAPI.emitSpraySize(intValue),\n    // })\n  }\n\n  onSelectDashItem = (event) => {\n    const targetElement = event.target;\n    if (\n      targetElement.tagName === 'svg' ||\n      targetElement.tagName === 'path'\n    ) {\n      this.setState(orderActionButtons('spray', this.state.actionButtons));\n    }\n    else if (targetElement.className === 'Dash') {\n      this.setState(orderActionButtons('bg', this.state.actionButtons));\n    }\n    else if (targetElement.className === 'BrushSize') {\n      this.setState(orderActionButtons('size', this.state.actionButtons));\n    }\n  }\n\n  onPrevButtonClick = () => {\n    if (this.state.currentActionButtonIndex <= 0) {\n      return;\n    }\n\n    this.setState((prevState) => ({\n      currentActionButtonIndex: prevState.currentActionButtonIndex - 1,\n    }));\n  }\n\n  onNextButtonClick = () => {\n    if (this.state.currentActionButtonIndex >= this.state.actionButtons.length - 1) {\n      return;\n    }\n\n    this.setState((prevState) => ({\n      currentActionButtonIndex: prevState.currentActionButtonIndex + 1,\n    }));\n  }\n\n  onDeviceOrientationChange = (keyword) => (event) => {\n    const percent = this.convert.tiltToPercent(event.beta);\n    switch (keyword) {\n      case 'spray-color':\n        this.onChangeSprayColor(percent);\n        break;\n      case 'spray-darkness':\n        this.onChangeSprayDarkness(percent);\n        break;\n      case 'spray-size':\n        this.onChangeSpraySize(percent);\n        break;\n      case 'bg-color':\n        this.onChangeBgColor(percent);\n        break;\n      case 'bg-darkness':\n        this.onChangeBgDarkness(percent);\n        break;\n      default:\n        break;\n    }\n  }\n\n  renderSlider = (sliderType, { onChange, knobPosition, color }) => {\n\n    switch (sliderType) {\n      case 'color':\n        return (\n          <ColorPicker\n            onChange={onChange}\n            knobPosition={knobPosition}\n          />\n        );\n      case 'darkness':\n        return (\n          <AlphaSlider\n            onChange={onChange}\n            knobPosition={knobPosition}\n            color={color}\n          />\n        );\n      case 'size':\n        return (\n          <SizeSlider\n            onChange={onChange}\n            knobPosition={knobPosition}\n          />\n        );\n      default:\n        break;\n    }\n  }\n\n  render() {\n\n    const sprayColorRGB = this.convert.colorPercentToRGB(this.state.sprayColor);\n    const bgColorRGB = this.convert.colorPercentToRGB(this.state.bgColor);\n    const sprayColor = this.convert.rgbAndDarknessToRGBA(sprayColorRGB, this.state.sprayDarkness);\n    const bgColor = this.convert.rgbAndDarknessToRGBA(bgColorRGB, this.state.bgDarkness);\n    const { id, sliderType } = this.state.actionButtons[this.state.currentActionButtonIndex];\n\n    const idToDataMap = {\n      'spray-color': {\n        onChange: this.onChangeSprayColor,\n        knobPosition: this.state.sprayColor,\n      },\n      'spray-darkness': {\n        onChange: this.onChangeSprayDarkness,\n        knobPosition: this.state.sprayDarkness,\n        color: this.convert.rgbAndDarknessToRGBA(sprayColorRGB, 50)\n      },\n      'spray-size': {\n        onChange: this.onChangeSpraySize,\n        knobPosition: this.state.spraySize,\n      },\n      'bg-color': {\n        onChange: this.onChangeBgColor,\n        knobPosition: this.state.bgColor,\n      },\n      'bg-darkness': {\n        onChange: this.onChangeBgDarkness,\n        knobPosition: this.state.bgDarkness,\n        color: this.convert.rgbAndDarknessToRGBA(bgColorRGB, 50)\n      },\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"Header TipBarContainer\">\n          <div className=\"ToolBar\">\n            <div className=\"Undo\"\n              onClick={this.onUndoClicked}\n            >\n              <FontAwesomeIcon icon=\"undo-alt\" size=\"2x\" />\n            </div>\n\n            <div className=\"Clear\"\n              onClick={this.onClearClicked}\n            >\n              <button className=\"PrimaryButton\">Clear</button>\n            </div>\n\n            <div className=\"Redo\"\n              onClick={this.onRedoClicked}\n            >\n              <FontAwesomeIcon icon=\"redo-alt\" size=\"2x\" />\n            </div>\n          </div>\n          {/* <div className=\"TipBar\">\n            <p>Draw-Something</p>\n            <p>{this.state.tipBarLabelText}</p>\n          </div> */}\n        </div>\n\n        <div className=\"Content\">\n\n          <div className=\"DashContainer\">\n            <div className=\"Dash\"\n              onClick={this.onSelectDashItem}\n              style={{\n                backgroundColor: bgColor,\n              }}\n            >\n              <div className=\"Spray\"\n                style={{\n                  color: sprayColor,\n                }}\n              >\n                <FontAwesomeIcon icon={faSprayCan} size=\"10x\" />\n              </div>\n\n              <div className=\"BrushSize\" >\n                <p>\n                  {this.convert.percentToSpraySize(this.state.spraySize)}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"ToolSliderContainer\">\n            {\n              this.renderSlider(sliderType, idToDataMap[id])\n            }\n          </div>\n\n        </div>\n\n        <div className=\"Footer ActionCarouselContainer\">\n          <ActionCarousel\n            currentIndex={this.state.currentActionButtonIndex}\n            onNext={this.onNextButtonClick}\n            onPrev={this.onPrevButtonClick}\n          >\n            {\n              this.state.actionButtons.map(\n                ({ id, type, number, name, iconName }) => (\n                  <div className=\"ActionButtonContainer\"\n                    key={`${type}-${number}-container`}\n                    onTouchStart={() => {\n                      this.currentDeviceOrientationChangeListener = this.onDeviceOrientationChange(id);\n                      window.addEventListener('deviceorientation', this.currentDeviceOrientationChangeListener);\n                    }}\n                    onTouchEnd={() => {\n                      window.removeEventListener('deviceorientation', this.currentDeviceOrientationChangeListener);\n                    }}\n                  >\n                    <div id={id} key={`${type}-${number}`} className=\"ActionButton\">\n                      <p className=\"ActionButtonTitle\">{name}</p>\n                      <FontAwesomeIcon icon={iconName} size=\"5x\" />\n                    </div>\n                  </div>\n                )\n              )\n            }\n          </ActionCarousel>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}